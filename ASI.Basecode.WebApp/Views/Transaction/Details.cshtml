@{
    var currentPage = ViewData["CurrentPage"] as int? ?? 1;
    var totalPages = ViewData["TotalPages"] as int? ?? 1;
    int maxVisiblePages = 5; 
}
@using ASI.Basecode.Services.ServiceModels
<div class="transaction-container overflow-x-auto shadow-md bg-gray-30 dark:bg-gray-700">
    <table class="transaction-table bg-white dark:bg-gray-800 rounded-lg w-full text-gray-900 dark:text-gray-200">
        <thead class="bg-gray-200 dark:bg-gray-900 dark:text-white">
            <tr>
                <th class="p-4 text-left">Category</th>
                <th class="p-4 text-left">Amount</th>
                <th class="p-4 text-left">Wallet</th>
                <th class="p-4 text-left">Date</th>
                <th class="p-4 text-left">Note</th>
                <th class="p-4 text-left">Action</th>
            </tr>
        </thead>
        <tbody class="dark:bg-gray-700 dark:text-white overflow-y-auto">
            @if (ViewData["Transactions"] is List<TransactionViewModel> transactions)
            {
                @Html.AntiForgeryToken()
                foreach (var transaction in transactions)
                {
                    <tr data-category="@transaction.CategoryId" data-type="@transaction.TransactionType" class="border-b border-gray-300 dark:border-gray-600 odd:bg-white even:bg-gray-100 dark:odd:bg-gray-800 dark:even:bg-gray-700">
                        <td class="px-4 py-4 w-1/6 whitespace-nowrap">
                            <div class="flex items-center space-x-4">
                                <span class="flex items-center justify-center p-2 w-12 h-12 rounded-full" style="background-color: @transaction.CategoryColor;">
                                    <span class="text-xl">@transaction.CategoryIcon</span>
                                </span>
                                <span>@transaction.CategoryName</span>
                            </div>
                        </td>

                        <td class="px-4 py-4 w-1/6 whitespace-nowrap">
                            <div class="flex items-center space-x-1">
                                @if (transaction.TransactionType == "Expense")
                                {
                                    <div class="bg-red-400 dark:bg-red-600 text-white px-2 py-1 rounded">
                                        <span>-₱&nbsp;@String.Format("{0:#,0.00}", Math.Abs(transaction.Amount))</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="bg-green-400 dark:bg-green-600 text-white px-2 py-1 rounded">
                                        <span>₱&nbsp;@String.Format("{0:#,0.00}", transaction.Amount)</span>
                                    </div>
                                }
                            </div>
                        </td>

                        <td class="px-4 py-4 w-1/6 whitespace-nowrap">
                            <div class="flex items-center space-x-4">
                                <span class="flex items-center justify-center p-2 w-12 h-12 rounded-full" style="background-color: @transaction.WalletColor;">
                                    <span class="text-xl">@transaction.WalletIcon</span>
                                </span>
                                <span>@transaction.WalletName</span>
                            </div>
                        </td>

                        <td class="px-4 py-3 w-1/6">@transaction.TransactionDate.ToShortDateString()</td>
                        <td class="px-4 py-3 w-2/6">@(!string.IsNullOrEmpty(transaction.Note) ? transaction.Note : "N/A")</td>

                        <td class="px-4 py-3">
                            <div class="flex space-x-2">
                                <button data-id="@transaction.TransactionId"
                                        class="editTransaction border border-gray-600 dark:border-gray-500 text-gray-600 dark:text-gray-300 hover:bg-gray-600 dark:hover:bg-gray-500 hover:text-white px-3 py-1 rounded-lg transition duration-150 flex items-center">
                                    <i class="fas fa-pen mr-1"></i> Edit
                                </button>
                                <button data-id="@transaction.TransactionId"
                                        class="border border-red-500 dark:border-red-600 text-red-500 dark:text-red-400 hover:bg-red-500 dark:hover:bg-red-600 hover:text-white px-3 py-1 rounded-lg transition duration-150 deleteTransaction flex items-center">
                                    <i class="fas fa-trash-can mr-2"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<div class="mt-4 flex justify-end">
    <!-- Container for two columns (X of Y items and Pagination) -->
    <div class="grid grid-cols-2 gap-4">
        <!-- Display "X of Y items" on the left side -->
        <span id="item-count" class="text-gray-500 dark:text-white text-right">
            @if (ViewData["TotalTransactions"] != null && ViewData["DisplayedItems"] != null)
            {
                int totalTransactions = (int)ViewData["TotalTransactions"];
                int displayedItems = (int)ViewData["DisplayedItems"];
                <span>@displayedItems of @totalTransactions items</span>
            }
        </span>


        <!-- Pagination Controls on the right side -->
        <ul class="pagination space-x-2 justify-end text-gray-50 dark:text-white">
            @if (currentPage > 1)
            {
                <li>
                    <a href="@Url.Action("Index", new { page = currentPage - 1 })"
                       class="pagination-link px-3 py-2 border rounded text-gray-700 dark:text-white bg-gray-50 dark:bg-gray-700 hover:no-underline hover:bg-gray-200 dark:hover:bg-gray-600">
                        <span>&lt;</span> <!-- Left angle bracket -->
                    </a>
                </li>
            }

            @for (var i = 1; i <= totalPages; i++)
            {
                <li>
                    <a href="@Url.Action("Index", new { page = i })"
                       class="pagination-link px-3 py-2 border rounded
                     @(i == currentPage ? "bg-blue-500 text-white hover:no-underline" : "bg-gray-50 text-gray-700 dark:bg-gray-700 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-500 hover:no-underline")">
                        @i
                    </a>
                </li>
            }

            @if (currentPage < totalPages)
            {
                <li>
                    <a href="@Url.Action("Index", new { page = currentPage + 1 })"
                       class="pagination-link px-3 py-2 border rounded text-gray-700 dark:text-white bg-gray-50 dark:bg-gray-700 hover:no-underline hover:bg-gray-200 dark:hover:bg-gray-600">
                        <span>&gt;</span> <!-- Right angle bracket -->
                    </a>
                </li>
            }
        </ul>
    </div>
</div>


